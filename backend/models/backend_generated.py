# automatically generated by the FlatBuffers compiler, do not modify

# namespace: HttpInterceptor

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Operator(object):
    CONTAINS = 0
    EQUALS = 1
    STARTS_WITH = 2
    ENDS_WITH = 3
    REGEX = 4


class RuleAction(object):
    ADD_HEADER = 0
    MODIFY_HEADER = 1
    DELETE_HEADER = 2
    MODIFY_BODY = 3
    BLOCK_REQUEST = 4
    AUTO_RESPOND = 5


class OperationType(object):
    FULL_SYNC = 0
    ADD = 1
    UPDATE = 2
    DELETE = 3


class HeaderPair(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = HeaderPair()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsHeaderPair(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # HeaderPair
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # HeaderPair
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # HeaderPair
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def HeaderPairStart(builder):
    builder.StartObject(2)

def HeaderPairAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def HeaderPairAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def HeaderPairEnd(builder):
    return builder.EndObject()



class FlowData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FlowData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFlowData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # FlowData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FlowData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FlowData
    def Method(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FlowData
    def Url(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FlowData
    def Status(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # FlowData
    def StartTimestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # FlowData
    def EndTimestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # FlowData
    def RequestSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FlowData
    def ResponseSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FlowData
    def RequestHeaders(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = HeaderPair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FlowData
    def RequestHeadersLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FlowData
    def RequestHeadersIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # FlowData
    def ResponseHeaders(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = HeaderPair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FlowData
    def ResponseHeadersLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FlowData
    def ResponseHeadersIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # FlowData
    def RequestBody(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FlowData
    def ResponseBody(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FlowData
    def IsIntercepted(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def FlowDataStart(builder):
    builder.StartObject(13)

def FlowDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def FlowDataAddMethod(builder, method):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(method), 0)

def FlowDataAddUrl(builder, url):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(url), 0)

def FlowDataAddStatus(builder, status):
    builder.PrependUint16Slot(3, status, 0)

def FlowDataAddStartTimestamp(builder, startTimestamp):
    builder.PrependFloat64Slot(4, startTimestamp, 0.0)

def FlowDataAddEndTimestamp(builder, endTimestamp):
    builder.PrependFloat64Slot(5, endTimestamp, 0.0)

def FlowDataAddRequestSize(builder, requestSize):
    builder.PrependUint32Slot(6, requestSize, 0)

def FlowDataAddResponseSize(builder, responseSize):
    builder.PrependUint32Slot(7, responseSize, 0)

def FlowDataAddRequestHeaders(builder, requestHeaders):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(requestHeaders), 0)

def FlowDataStartRequestHeadersVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def FlowDataAddResponseHeaders(builder, responseHeaders):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(responseHeaders), 0)

def FlowDataStartResponseHeadersVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def FlowDataAddRequestBody(builder, requestBody):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(requestBody), 0)

def FlowDataAddResponseBody(builder, responseBody):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(responseBody), 0)

def FlowDataAddIsIntercepted(builder, isIntercepted):
    builder.PrependBoolSlot(12, isIntercepted, 0)

def FlowDataEnd(builder):
    return builder.EndObject()



class FilterModel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FilterModel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFilterModel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # FilterModel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FilterModel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FilterModel
    def FilterName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FilterModel
    def Field(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FilterModel
    def Operator(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # FilterModel
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def FilterModelStart(builder):
    builder.StartObject(5)

def FilterModelAddId(builder, id):
    builder.PrependUint32Slot(0, id, 0)

def FilterModelAddFilterName(builder, filterName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(filterName), 0)

def FilterModelAddField(builder, field):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(field), 0)

def FilterModelAddOperator(builder, operator):
    builder.PrependInt8Slot(3, operator, 0)

def FilterModelAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def FilterModelEnd(builder):
    return builder.EndObject()



class RuleModel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RuleModel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRuleModel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # RuleModel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # RuleModel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # RuleModel
    def RuleName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # RuleModel
    def FilterId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # RuleModel
    def Action(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # RuleModel
    def TargetKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # RuleModel
    def TargetValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # RuleModel
    def Enabled(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return True

def RuleModelStart(builder):
    builder.StartObject(7)

def RuleModelAddId(builder, id):
    builder.PrependUint32Slot(0, id, 0)

def RuleModelAddRuleName(builder, ruleName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(ruleName), 0)

def RuleModelAddFilterId(builder, filterId):
    builder.PrependUint32Slot(2, filterId, 0)

def RuleModelAddAction(builder, action):
    builder.PrependInt8Slot(3, action, 0)

def RuleModelAddTargetKey(builder, targetKey):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(targetKey), 0)

def RuleModelAddTargetValue(builder, targetValue):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(targetValue), 0)

def RuleModelAddEnabled(builder, enabled):
    builder.PrependBoolSlot(6, enabled, 1)

def RuleModelEnd(builder):
    return builder.EndObject()



class SyncMessage(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SyncMessage()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSyncMessage(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SyncMessage
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SyncMessage
    def Operation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # SyncMessage
    def RulesList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = RuleModel()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SyncMessage
    def RulesListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SyncMessage
    def RulesListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # SyncMessage
    def FiltersData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = FilterModel()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SyncMessage
    def FiltersDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SyncMessage
    def FiltersDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # SyncMessage
    def Timestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def SyncMessageStart(builder):
    builder.StartObject(4)

def SyncMessageAddOperation(builder, operation):
    builder.PrependInt8Slot(0, operation, 0)

def SyncMessageAddRulesList(builder, rulesList):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(rulesList), 0)

def SyncMessageStartRulesListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def SyncMessageAddFiltersData(builder, filtersData):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(filtersData), 0)

def SyncMessageStartFiltersDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def SyncMessageAddTimestamp(builder, timestamp):
    builder.PrependFloat64Slot(3, timestamp, 0.0)

def SyncMessageEnd(builder):
    return builder.EndObject()



