# automatically generated by the FlatBuffers compiler, do not modify

# namespace: HttpInterceptor

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class RuleModel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsRuleModel(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RuleModel()
        x.Init(buf, n + offset)
        return x

    # RuleModel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # RuleModel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # RuleModel
    def RuleName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # RuleModel
    def FilterId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # RuleModel
    def Action(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # RuleModel
    def TargetKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # RuleModel
    def TargetValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # RuleModel
    def Enabled(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return True

def RuleModelStart(builder): builder.StartObject(7)
def RuleModelAddId(builder, id): builder.PrependUint32Slot(0, id, 0)
def RuleModelAddRuleName(builder, ruleName): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(ruleName), 0)
def RuleModelAddFilterId(builder, filterId): builder.PrependUint32Slot(2, filterId, 0)
def RuleModelAddAction(builder, action): builder.PrependInt8Slot(3, action, 0)
def RuleModelAddTargetKey(builder, targetKey): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(targetKey), 0)
def RuleModelAddTargetValue(builder, targetValue): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(targetValue), 0)
def RuleModelAddEnabled(builder, enabled): builder.PrependBoolSlot(6, enabled, 1)
def RuleModelEnd(builder): return builder.EndObject()


class RuleModelT(object):

    # RuleModelT
    def __init__(self):
        self.id = 0  # type: int
        self.ruleName = None  # type: str
        self.filterId = 0  # type: int
        self.action = 0  # type: int
        self.targetKey = None  # type: str
        self.targetValue = None  # type: str
        self.enabled = True  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        ruleModel = RuleModel()
        ruleModel.Init(buf, pos)
        return cls.InitFromObj(ruleModel)

    @classmethod
    def InitFromObj(cls, ruleModel):
        x = RuleModelT()
        x._UnPack(ruleModel)
        return x

    # RuleModelT
    def _UnPack(self, ruleModel):
        if ruleModel is None:
            return
        self.id = ruleModel.Id()
        self.ruleName = ruleModel.RuleName()
        self.filterId = ruleModel.FilterId()
        self.action = ruleModel.Action()
        self.targetKey = ruleModel.TargetKey()
        self.targetValue = ruleModel.TargetValue()
        self.enabled = ruleModel.Enabled()

    # RuleModelT
    def Pack(self, builder):
        if self.ruleName is not None:
            ruleName = builder.CreateString(self.ruleName)
        if self.targetKey is not None:
            targetKey = builder.CreateString(self.targetKey)
        if self.targetValue is not None:
            targetValue = builder.CreateString(self.targetValue)
        RuleModelStart(builder)
        RuleModelAddId(builder, self.id)
        if self.ruleName is not None:
            RuleModelAddRuleName(builder, ruleName)
        RuleModelAddFilterId(builder, self.filterId)
        RuleModelAddAction(builder, self.action)
        if self.targetKey is not None:
            RuleModelAddTargetKey(builder, targetKey)
        if self.targetValue is not None:
            RuleModelAddTargetValue(builder, targetValue)
        RuleModelAddEnabled(builder, self.enabled)
        ruleModel = RuleModelEnd(builder)
        return ruleModel
