# automatically generated by the FlatBuffers compiler, do not modify

# namespace: HttpInterceptor

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class HeaderPair(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsHeaderPair(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = HeaderPair()
        x.Init(buf, n + offset)
        return x

    # HeaderPair
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # HeaderPair
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # HeaderPair
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def HeaderPairStart(builder): builder.StartObject(2)
def HeaderPairAddKey(builder, key): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)
def HeaderPairAddValue(builder, value): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)
def HeaderPairEnd(builder): return builder.EndObject()


class HeaderPairT(object):

    # HeaderPairT
    def __init__(self):
        self.key = None  # type: str
        self.value = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        headerPair = HeaderPair()
        headerPair.Init(buf, pos)
        return cls.InitFromObj(headerPair)

    @classmethod
    def InitFromObj(cls, headerPair):
        x = HeaderPairT()
        x._UnPack(headerPair)
        return x

    # HeaderPairT
    def _UnPack(self, headerPair):
        if headerPair is None:
            return
        self.key = headerPair.Key()
        self.value = headerPair.Value()

    # HeaderPairT
    def Pack(self, builder):
        if self.key is not None:
            key = builder.CreateString(self.key)
        if self.value is not None:
            value = builder.CreateString(self.value)
        HeaderPairStart(builder)
        if self.key is not None:
            HeaderPairAddKey(builder, key)
        if self.value is not None:
            HeaderPairAddValue(builder, value)
        headerPair = HeaderPairEnd(builder)
        return headerPair
