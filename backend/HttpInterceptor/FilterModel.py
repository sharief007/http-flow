# automatically generated by the FlatBuffers compiler, do not modify

# namespace: HttpInterceptor

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class FilterModel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsFilterModel(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FilterModel()
        x.Init(buf, n + offset)
        return x

    # FilterModel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FilterModel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FilterModel
    def FilterName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FilterModel
    def Field(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FilterModel
    def Operator(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # FilterModel
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def FilterModelStart(builder): builder.StartObject(5)
def FilterModelAddId(builder, id): builder.PrependUint32Slot(0, id, 0)
def FilterModelAddFilterName(builder, filterName): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(filterName), 0)
def FilterModelAddField(builder, field): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(field), 0)
def FilterModelAddOperator(builder, operator): builder.PrependInt8Slot(3, operator, 0)
def FilterModelAddValue(builder, value): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)
def FilterModelEnd(builder): return builder.EndObject()


class FilterModelT(object):

    # FilterModelT
    def __init__(self):
        self.id = 0  # type: int
        self.filterName = None  # type: str
        self.field = None  # type: str
        self.operator = 0  # type: int
        self.value = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        filterModel = FilterModel()
        filterModel.Init(buf, pos)
        return cls.InitFromObj(filterModel)

    @classmethod
    def InitFromObj(cls, filterModel):
        x = FilterModelT()
        x._UnPack(filterModel)
        return x

    # FilterModelT
    def _UnPack(self, filterModel):
        if filterModel is None:
            return
        self.id = filterModel.Id()
        self.filterName = filterModel.FilterName()
        self.field = filterModel.Field()
        self.operator = filterModel.Operator()
        self.value = filterModel.Value()

    # FilterModelT
    def Pack(self, builder):
        if self.filterName is not None:
            filterName = builder.CreateString(self.filterName)
        if self.field is not None:
            field = builder.CreateString(self.field)
        if self.value is not None:
            value = builder.CreateString(self.value)
        FilterModelStart(builder)
        FilterModelAddId(builder, self.id)
        if self.filterName is not None:
            FilterModelAddFilterName(builder, filterName)
        if self.field is not None:
            FilterModelAddField(builder, field)
        FilterModelAddOperator(builder, self.operator)
        if self.value is not None:
            FilterModelAddValue(builder, value)
        filterModel = FilterModelEnd(builder)
        return filterModel
