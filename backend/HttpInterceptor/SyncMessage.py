# automatically generated by the FlatBuffers compiler, do not modify

# namespace: HttpInterceptor

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SyncMessage(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsSyncMessage(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SyncMessage()
        x.Init(buf, n + offset)
        return x

    # SyncMessage
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SyncMessage
    def Operation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # SyncMessage
    def RulesList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from HttpInterceptor.RuleModel import RuleModel
            obj = RuleModel()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SyncMessage
    def RulesListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SyncMessage
    def RulesListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # SyncMessage
    def FiltersData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from HttpInterceptor.FilterModel import FilterModel
            obj = FilterModel()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SyncMessage
    def FiltersDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SyncMessage
    def FiltersDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # SyncMessage
    def Timestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def SyncMessageStart(builder): builder.StartObject(4)
def SyncMessageAddOperation(builder, operation): builder.PrependInt8Slot(0, operation, 0)
def SyncMessageAddRulesList(builder, rulesList): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(rulesList), 0)
def SyncMessageStartRulesListVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def SyncMessageAddFiltersData(builder, filtersData): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(filtersData), 0)
def SyncMessageStartFiltersDataVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def SyncMessageAddTimestamp(builder, timestamp): builder.PrependFloat64Slot(3, timestamp, 0.0)
def SyncMessageEnd(builder): return builder.EndObject()

import HttpInterceptor.FilterModel
import HttpInterceptor.RuleModel
try:
    from typing import List
except:
    pass

class SyncMessageT(object):

    # SyncMessageT
    def __init__(self):
        self.operation = 0  # type: int
        self.rulesList = None  # type: List[HttpInterceptor.RuleModel.RuleModelT]
        self.filtersData = None  # type: List[HttpInterceptor.FilterModel.FilterModelT]
        self.timestamp = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        syncMessage = SyncMessage()
        syncMessage.Init(buf, pos)
        return cls.InitFromObj(syncMessage)

    @classmethod
    def InitFromObj(cls, syncMessage):
        x = SyncMessageT()
        x._UnPack(syncMessage)
        return x

    # SyncMessageT
    def _UnPack(self, syncMessage):
        if syncMessage is None:
            return
        self.operation = syncMessage.Operation()
        if not syncMessage.RulesListIsNone():
            self.rulesList = []
            for i in range(syncMessage.RulesListLength()):
                if syncMessage.RulesList(i) is None:
                    self.rulesList.append(None)
                else:
                    ruleModel_ = HttpInterceptor.RuleModel.RuleModelT.InitFromObj(syncMessage.RulesList(i))
                    self.rulesList.append(ruleModel_)
        if not syncMessage.FiltersDataIsNone():
            self.filtersData = []
            for i in range(syncMessage.FiltersDataLength()):
                if syncMessage.FiltersData(i) is None:
                    self.filtersData.append(None)
                else:
                    filterModel_ = HttpInterceptor.FilterModel.FilterModelT.InitFromObj(syncMessage.FiltersData(i))
                    self.filtersData.append(filterModel_)
        self.timestamp = syncMessage.Timestamp()

    # SyncMessageT
    def Pack(self, builder):
        if self.rulesList is not None:
            rulesListlist = []
            for i in range(len(self.rulesList)):
                rulesListlist.append(self.rulesList[i].Pack(builder))
            SyncMessageStartRulesListVector(builder, len(self.rulesList))
            for i in reversed(range(len(self.rulesList))):
                builder.PrependUOffsetTRelative(rulesListlist[i])
            rulesList = builder.EndVector(len(self.rulesList))
        if self.filtersData is not None:
            filtersDatalist = []
            for i in range(len(self.filtersData)):
                filtersDatalist.append(self.filtersData[i].Pack(builder))
            SyncMessageStartFiltersDataVector(builder, len(self.filtersData))
            for i in reversed(range(len(self.filtersData))):
                builder.PrependUOffsetTRelative(filtersDatalist[i])
            filtersData = builder.EndVector(len(self.filtersData))
        SyncMessageStart(builder)
        SyncMessageAddOperation(builder, self.operation)
        if self.rulesList is not None:
            SyncMessageAddRulesList(builder, rulesList)
        if self.filtersData is not None:
            SyncMessageAddFiltersData(builder, filtersData)
        SyncMessageAddTimestamp(builder, self.timestamp)
        syncMessage = SyncMessageEnd(builder)
        return syncMessage
