# automatically generated by the FlatBuffers compiler, do not modify

# namespace: HttpInterceptor

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class FlowData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsFlowData(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FlowData()
        x.Init(buf, n + offset)
        return x

    # FlowData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FlowData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FlowData
    def Method(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FlowData
    def Url(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FlowData
    def Status(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # FlowData
    def StartTimestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # FlowData
    def EndTimestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # FlowData
    def RequestSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FlowData
    def ResponseSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FlowData
    def RequestHeaders(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from HttpInterceptor.HeaderPair import HeaderPair
            obj = HeaderPair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FlowData
    def RequestHeadersLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FlowData
    def RequestHeadersIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # FlowData
    def ResponseHeaders(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from HttpInterceptor.HeaderPair import HeaderPair
            obj = HeaderPair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FlowData
    def ResponseHeadersLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FlowData
    def ResponseHeadersIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # FlowData
    def RequestBody(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FlowData
    def ResponseBody(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FlowData
    def IsIntercepted(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def FlowDataStart(builder): builder.StartObject(13)
def FlowDataAddId(builder, id): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)
def FlowDataAddMethod(builder, method): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(method), 0)
def FlowDataAddUrl(builder, url): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(url), 0)
def FlowDataAddStatus(builder, status): builder.PrependUint16Slot(3, status, 0)
def FlowDataAddStartTimestamp(builder, startTimestamp): builder.PrependFloat64Slot(4, startTimestamp, 0.0)
def FlowDataAddEndTimestamp(builder, endTimestamp): builder.PrependFloat64Slot(5, endTimestamp, 0.0)
def FlowDataAddRequestSize(builder, requestSize): builder.PrependUint32Slot(6, requestSize, 0)
def FlowDataAddResponseSize(builder, responseSize): builder.PrependUint32Slot(7, responseSize, 0)
def FlowDataAddRequestHeaders(builder, requestHeaders): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(requestHeaders), 0)
def FlowDataStartRequestHeadersVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def FlowDataAddResponseHeaders(builder, responseHeaders): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(responseHeaders), 0)
def FlowDataStartResponseHeadersVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def FlowDataAddRequestBody(builder, requestBody): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(requestBody), 0)
def FlowDataAddResponseBody(builder, responseBody): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(responseBody), 0)
def FlowDataAddIsIntercepted(builder, isIntercepted): builder.PrependBoolSlot(12, isIntercepted, 0)
def FlowDataEnd(builder): return builder.EndObject()

import HttpInterceptor.HeaderPair
try:
    from typing import List
except:
    pass

class FlowDataT(object):

    # FlowDataT
    def __init__(self):
        self.id = None  # type: str
        self.method = None  # type: str
        self.url = None  # type: str
        self.status = 0  # type: int
        self.startTimestamp = 0.0  # type: float
        self.endTimestamp = 0.0  # type: float
        self.requestSize = 0  # type: int
        self.responseSize = 0  # type: int
        self.requestHeaders = None  # type: List[HttpInterceptor.HeaderPair.HeaderPairT]
        self.responseHeaders = None  # type: List[HttpInterceptor.HeaderPair.HeaderPairT]
        self.requestBody = None  # type: str
        self.responseBody = None  # type: str
        self.isIntercepted = False  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        flowData = FlowData()
        flowData.Init(buf, pos)
        return cls.InitFromObj(flowData)

    @classmethod
    def InitFromObj(cls, flowData):
        x = FlowDataT()
        x._UnPack(flowData)
        return x

    # FlowDataT
    def _UnPack(self, flowData):
        if flowData is None:
            return
        self.id = flowData.Id()
        self.method = flowData.Method()
        self.url = flowData.Url()
        self.status = flowData.Status()
        self.startTimestamp = flowData.StartTimestamp()
        self.endTimestamp = flowData.EndTimestamp()
        self.requestSize = flowData.RequestSize()
        self.responseSize = flowData.ResponseSize()
        if not flowData.RequestHeadersIsNone():
            self.requestHeaders = []
            for i in range(flowData.RequestHeadersLength()):
                if flowData.RequestHeaders(i) is None:
                    self.requestHeaders.append(None)
                else:
                    headerPair_ = HttpInterceptor.HeaderPair.HeaderPairT.InitFromObj(flowData.RequestHeaders(i))
                    self.requestHeaders.append(headerPair_)
        if not flowData.ResponseHeadersIsNone():
            self.responseHeaders = []
            for i in range(flowData.ResponseHeadersLength()):
                if flowData.ResponseHeaders(i) is None:
                    self.responseHeaders.append(None)
                else:
                    headerPair_ = HttpInterceptor.HeaderPair.HeaderPairT.InitFromObj(flowData.ResponseHeaders(i))
                    self.responseHeaders.append(headerPair_)
        self.requestBody = flowData.RequestBody()
        self.responseBody = flowData.ResponseBody()
        self.isIntercepted = flowData.IsIntercepted()

    # FlowDataT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.method is not None:
            method = builder.CreateString(self.method)
        if self.url is not None:
            url = builder.CreateString(self.url)
        if self.requestHeaders is not None:
            requestHeaderslist = []
            for i in range(len(self.requestHeaders)):
                requestHeaderslist.append(self.requestHeaders[i].Pack(builder))
            FlowDataStartRequestHeadersVector(builder, len(self.requestHeaders))
            for i in reversed(range(len(self.requestHeaders))):
                builder.PrependUOffsetTRelative(requestHeaderslist[i])
            requestHeaders = builder.EndVector(len(self.requestHeaders))
        if self.responseHeaders is not None:
            responseHeaderslist = []
            for i in range(len(self.responseHeaders)):
                responseHeaderslist.append(self.responseHeaders[i].Pack(builder))
            FlowDataStartResponseHeadersVector(builder, len(self.responseHeaders))
            for i in reversed(range(len(self.responseHeaders))):
                builder.PrependUOffsetTRelative(responseHeaderslist[i])
            responseHeaders = builder.EndVector(len(self.responseHeaders))
        if self.requestBody is not None:
            requestBody = builder.CreateString(self.requestBody)
        if self.responseBody is not None:
            responseBody = builder.CreateString(self.responseBody)
        FlowDataStart(builder)
        if self.id is not None:
            FlowDataAddId(builder, id)
        if self.method is not None:
            FlowDataAddMethod(builder, method)
        if self.url is not None:
            FlowDataAddUrl(builder, url)
        FlowDataAddStatus(builder, self.status)
        FlowDataAddStartTimestamp(builder, self.startTimestamp)
        FlowDataAddEndTimestamp(builder, self.endTimestamp)
        FlowDataAddRequestSize(builder, self.requestSize)
        FlowDataAddResponseSize(builder, self.responseSize)
        if self.requestHeaders is not None:
            FlowDataAddRequestHeaders(builder, requestHeaders)
        if self.responseHeaders is not None:
            FlowDataAddResponseHeaders(builder, responseHeaders)
        if self.requestBody is not None:
            FlowDataAddRequestBody(builder, requestBody)
        if self.responseBody is not None:
            FlowDataAddResponseBody(builder, responseBody)
        FlowDataAddIsIntercepted(builder, self.isIntercepted)
        flowData = FlowDataEnd(builder)
        return flowData
