# automatically generated by the FlatBuffers compiler, do not modify

# namespace: HttpInterceptor

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CoreMessage(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsCoreMessage(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CoreMessage()
        x.Init(buf, n + offset)
        return x

    # CoreMessage
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CoreMessage
    def MessageType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # CoreMessage
    def Message(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

    # CoreMessage
    def Timestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def CoreMessageStart(builder): builder.StartObject(3)
def CoreMessageAddMessageType(builder, messageType): builder.PrependUint8Slot(0, messageType, 0)
def CoreMessageAddMessage(builder, message): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(message), 0)
def CoreMessageAddTimestamp(builder, timestamp): builder.PrependFloat64Slot(2, timestamp, 0.0)
def CoreMessageEnd(builder): return builder.EndObject()

import HttpInterceptor.CoreMessageType
import HttpInterceptor.FilterModel
import HttpInterceptor.RuleModel
import HttpInterceptor.SyncMessage
try:
    from typing import Union
except:
    pass

class CoreMessageT(object):

    # CoreMessageT
    def __init__(self):
        self.messageType = 0  # type: int
        self.message = None  # type: Union[None, HttpInterceptor.FilterModel.FilterModelT, HttpInterceptor.RuleModel.RuleModelT, HttpInterceptor.SyncMessage.SyncMessageT]
        self.timestamp = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        coreMessage = CoreMessage()
        coreMessage.Init(buf, pos)
        return cls.InitFromObj(coreMessage)

    @classmethod
    def InitFromObj(cls, coreMessage):
        x = CoreMessageT()
        x._UnPack(coreMessage)
        return x

    # CoreMessageT
    def _UnPack(self, coreMessage):
        if coreMessage is None:
            return
        self.messageType = coreMessage.MessageType()
        self.message = HttpInterceptor.CoreMessageType.CoreMessageTypeCreator(self.messageType, coreMessage.Message())
        self.timestamp = coreMessage.Timestamp()

    # CoreMessageT
    def Pack(self, builder):
        if self.message is not None:
            message = self.message.Pack(builder)
        CoreMessageStart(builder)
        CoreMessageAddMessageType(builder, self.messageType)
        if self.message is not None:
            CoreMessageAddMessage(builder, message)
        CoreMessageAddTimestamp(builder, self.timestamp)
        coreMessage = CoreMessageEnd(builder)
        return coreMessage
