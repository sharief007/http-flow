// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { FlowData, FlowDataT } from '../http-interceptor/flow-data.js';
import { ServerEvent, ServerEventT } from '../http-interceptor/server-event.js';
import { WebSocketMessageType, unionToWebSocketMessageType, unionListToWebSocketMessageType } from '../http-interceptor/web-socket-message-type.js';


export class WebSocketMessage implements flatbuffers.IUnpackableObject<WebSocketMessageT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):WebSocketMessage {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsWebSocketMessage(bb:flatbuffers.ByteBuffer, obj?:WebSocketMessage):WebSocketMessage {
  return (obj || new WebSocketMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsWebSocketMessage(bb:flatbuffers.ByteBuffer, obj?:WebSocketMessage):WebSocketMessage {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new WebSocketMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

type():string|null
type(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
type(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

dataType():WebSocketMessageType {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : WebSocketMessageType.NONE;
}

data<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startWebSocketMessage(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addType(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, typeOffset, 0);
}

static addDataType(builder:flatbuffers.Builder, dataType:WebSocketMessageType) {
  builder.addFieldInt8(1, dataType, WebSocketMessageType.NONE);
}

static addData(builder:flatbuffers.Builder, dataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, dataOffset, 0);
}

static endWebSocketMessage(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // type
  builder.requiredField(offset, 8) // data
  return offset;
}

static finishWebSocketMessageBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedWebSocketMessageBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createWebSocketMessage(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset, dataType:WebSocketMessageType, dataOffset:flatbuffers.Offset):flatbuffers.Offset {
  WebSocketMessage.startWebSocketMessage(builder);
  WebSocketMessage.addType(builder, typeOffset);
  WebSocketMessage.addDataType(builder, dataType);
  WebSocketMessage.addData(builder, dataOffset);
  return WebSocketMessage.endWebSocketMessage(builder);
}

unpack(): WebSocketMessageT {
  return new WebSocketMessageT(
    this.type(),
    this.dataType(),
    (() => {
      const temp = unionToWebSocketMessageType(this.dataType(), this.data.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })()
  );
}


unpackTo(_o: WebSocketMessageT): void {
  _o.type = this.type();
  _o.dataType = this.dataType();
  _o.data = (() => {
      const temp = unionToWebSocketMessageType(this.dataType(), this.data.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })();
}
}

export class WebSocketMessageT implements flatbuffers.IGeneratedObject {
constructor(
  public type: string|Uint8Array|null = null,
  public dataType: WebSocketMessageType = WebSocketMessageType.NONE,
  public data: FlowDataT|ServerEventT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const type = (this.type !== null ? builder.createString(this.type!) : 0);
  const data = builder.createObjectOffset(this.data);

  return WebSocketMessage.createWebSocketMessage(builder,
    type,
    this.dataType,
    data
  );
}
}
