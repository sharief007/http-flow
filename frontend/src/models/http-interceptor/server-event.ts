// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class ServerEvent implements flatbuffers.IUnpackableObject<ServerEventT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ServerEvent {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsServerEvent(bb:flatbuffers.ByteBuffer, obj?:ServerEvent):ServerEvent {
  return (obj || new ServerEvent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsServerEvent(bb:flatbuffers.ByteBuffer, obj?:ServerEvent):ServerEvent {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ServerEvent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

status():string|null
status(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
status(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

port():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

static startServerEvent(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addStatus(builder:flatbuffers.Builder, statusOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, statusOffset, 0);
}

static addPort(builder:flatbuffers.Builder, port:number) {
  builder.addFieldInt16(1, port, 0);
}

static endServerEvent(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // status
  return offset;
}

static createServerEvent(builder:flatbuffers.Builder, statusOffset:flatbuffers.Offset, port:number):flatbuffers.Offset {
  ServerEvent.startServerEvent(builder);
  ServerEvent.addStatus(builder, statusOffset);
  ServerEvent.addPort(builder, port);
  return ServerEvent.endServerEvent(builder);
}

unpack(): ServerEventT {
  return new ServerEventT(
    this.status(),
    this.port()
  );
}


unpackTo(_o: ServerEventT): void {
  _o.status = this.status();
  _o.port = this.port();
}
}

export class ServerEventT implements flatbuffers.IGeneratedObject {
constructor(
  public status: string|Uint8Array|null = null,
  public port: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const status = (this.status !== null ? builder.createString(this.status!) : 0);

  return ServerEvent.createServerEvent(builder,
    status,
    this.port
  );
}
}
